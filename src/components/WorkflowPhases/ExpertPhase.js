import React, { useState, useEffect } from 'react';
import { useData } from '../../context/DataContext';
import { PhaseCard } from '../UI/Card';
import Button from '../UI/Button';
import Alert from '../UI/Alert';
import { applyFuzzyLogic } from '../../utils/fuzzyLogic';
import { performClustering } from '../../utils/clustering';
import { generateAIScenarios } from '../../utils/scenarios';

const ExpertPhase = ({
    isActive = true,
    isCompleted = false,
    onPhaseComplete,
    // –ù–û–í–´–ï –ü–†–û–ü–°–´:
    projectId,
    projectStorage,
    onUpdateProject
}) => {
    const {
        currentData,
        syntheticData,
        projectName,
        dataType,
        setFuzzyResults,
        setClusterData,
        setScenarios,
        setActiveTab,
        setCurrentData,
        setSyntheticData,
        setDecisionResults,
        setFinalRecommendations,
        setProjectName,
        setDataType
    } = useData();
    

    const [isProcessing, setIsProcessing] = useState(false);
    const [currentStep, setCurrentStep] = useState('');

    /**
     * Get current user ID - implement based on your auth system
     */
    const getCurrentUserId = () => {
        // Replace this with your actual user ID retrieval logic
        return parseInt(localStorage.getItem('userId')) || 1;
    };

    // –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        if (!projectId || !projectStorage) return;


        const project = projectStorage.getProject(projectId);
        if (!project) return;

        const managerData = project.workflowData.phases.manager.data;

        if (managerData) {
            if (managerData.parsedData) {
                setCurrentData(managerData.parsedData);
            }
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –≤ ManagerPhase
            if (managerData.projectName) {
                setProjectName(managerData.projectName);
            }
            if (managerData.dataType) {
                setDataType(managerData.dataType);
            }
        }

        // --- 1. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∞–∑—ã ---
        const analystData = project.workflowData.phases.analyst?.data;
        if (analystData?.dataPreview?.length > 0) {
            if (!currentData || currentData.length === 0) {
                // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º dataPreview –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                setCurrentData(analystData.dataPreview);
            }
        }

        // --- 2. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ---
        if (analystData?.syntheticDataGenerated) {
            if (!syntheticData || syntheticData.length === 0) {
                setSyntheticData(analystData.syntheticData || []);
            }
        }

        // --- 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DecisionPhase, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---
        const decisionData = project.workflowData.phases.decision?.data;
        if (decisionData) {
            if (decisionData.decisionMatrix && typeof setDecisionResults === 'function') {
                setDecisionResults(decisionData.decisionMatrix);
            }
            if (decisionData.finalRecommendations && typeof setFinalRecommendations === 'function') {
                setFinalRecommendations(decisionData.finalRecommendations);
            }
        }

        // --- 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ExpertPhase, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---
        const expertData = project.workflowData.phases.expert?.data;
        if (expertData) {
            if (expertData.fuzzyResults && typeof setFuzzyResults === 'function') {
                setFuzzyResults(expertData.fuzzyResults);
            }
            if (expertData.clusterData && typeof setClusterData === 'function') {
                setClusterData(expertData.clusterData);
            }
            if (project.scenarios && typeof setScenarios === 'function') {
                setScenarios(project.scenarios);
            }
        }

    }, [projectId, projectStorage]);


    /**
     * ’ì’∏÷Ä’±’°’£’•’ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’¥’•’Ø’∂’°÷Ä’Ø
     * ’Ü’•÷Ä’°’º’∏÷Ç’¥ ’ß ’¢’∏’¨’∏÷Ä ’≠’∏÷Ä’°÷Å’æ’°’Æ ’æ’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’¥’•’©’∏’§’∂’•÷Ä’®
     */
    const startExpertAnalysis = async () => {
        if (!currentData || currentData.length === 0) {
            alert('’è’æ’µ’°’¨’∂’•÷Ä’® ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’•’∂ ÷É’∏÷Ä’±’°’£’•’ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä');
            return;
        }

        setIsProcessing(true);

        try {
            // ‘±’∂’∏÷Ä’∏’∑ ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’°’∂ ’Ø’´÷Ä’°’º’∏÷Ç’¥
            setCurrentStep('‘±’∂’∏÷Ä’∏’∑ ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’°’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂...');
            await new Promise(resolve => setTimeout(resolve, 1000));

            const fuzzyAnalysis = applyFuzzyLogic(currentData, dataType, syntheticData);
            setFuzzyResults(fuzzyAnalysis);
            console.log('‘±’∂’∏÷Ä’∏’∑ ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’°’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂:', fuzzyAnalysis);

            // ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°
            setCurrentStep('’è’æ’µ’°’¨’∂’•÷Ä’´ ’Ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°...');
            await new Promise(resolve => setTimeout(resolve, 2000));

            const clusters = performClustering(currentData, dataType);
            setClusterData(clusters);
            console.log('‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ:', clusters);

            // Prepare analysis results for AI scenarios
            const analysisResults = {
                fuzzyResults: fuzzyAnalysis,
                statistics: {
                    mean: currentData.reduce((sum, item) => sum + (typeof item === 'object' ? Object.values(item)[0] : item), 0) / currentData.length,
                    stdDev: 0,
                    min: Math.min(...currentData.map(item => typeof item === 'object' ? Object.values(item)[0] : item)),
                    max: Math.max(...currentData.map(item => typeof item === 'object' ? Object.values(item)[0] : item))
                }
            };

            // AI ’Ω÷Å’•’∂’°÷Ä’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’´’°
            setCurrentStep('’ç÷Å’•’∂’°÷Ä’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥...');
            await new Promise(resolve => setTimeout(resolve, 2000));

            const userId = getCurrentUserId();
            const generatedScenarios = await generateAIScenarios(
                dataType,
                analysisResults,
                clusters
            );
            setScenarios(generatedScenarios);
            setCurrentStep('’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’°’¥÷É’∏÷É’æ’∏÷Ç’¥ ’ß...');
            await new Promise(resolve => setTimeout(resolve, 1000));

            // –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ñ–∞–∑—ã
            if (projectStorage && projectId) {
                const summary = getExpertSummary();
                projectStorage.updateExpertPhase(projectId, {
                    fuzzyResults: fuzzyAnalysis,
                    clusterData: clusters,
                    scenarios: generatedScenarios,
                    expertSummary: summary,
                    processingSteps: ['fuzzy', 'clustering', 'scenarios']
                });
            }

            setIsProcessing(false);
            setCurrentStep('');

            // Trigger automatic phase transition
            if (onPhaseComplete) {
                onPhaseComplete();
            }

            setActiveTab('clustering');

        } catch (error) {
            console.error('’ì’∏÷Ä’±’°’£’•’ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’Ω’≠’°’¨:', error);
            alert('’ì’∏÷Ä’±’°’£’•’ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’™’°’¥’°’∂’°’Ø ’Ω’≠’°’¨ ’°’º’°’ª’°÷Å’°’æ: ' + error.message);
            setIsProcessing(false);
            setCurrentStep('');
        }
    };

    /**
     * ’ì’∏÷Ä’±’°’£’•’ø’´ ’æ’´’≥’°’Ø’°’£÷Ä’°’Ø’°’∂ ’°’¥÷É’∏÷É’∏÷Ç’¥
     */
    const getExpertSummary = () => {
        const datasetSize = currentData?.length || 0;
        const syntheticSize = syntheticData?.length || 0;
        const totalProcessed = datasetSize + syntheticSize;

        return {
            originalDataset: datasetSize,
            syntheticDataset: syntheticSize,
            totalProcessed,
            analysisComplexity: getAnalysisComplexity(datasetSize),
            estimatedTime: getEstimatedProcessingTime(totalProcessed)
        };
    };

    /**
     * ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’¢’°÷Ä’§’∏÷Ç’©’µ’°’∂ ’£’∂’°’∞’°’ø’∏÷Ç’¥
     */
    const getAnalysisComplexity = (size) => {
        if (size < 100) return '’ä’°÷Ä’¶';
        if (size < 1000) return '’Ñ’´’ª’´’∂';
        if (size < 10000) return '‘≤’°÷Ä’§';
        return '’á’°’ø ’¢’°÷Ä’§';
    };

    /**
     * ’Ñ’∑’°’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥
     */
    const getEstimatedProcessingTime = (size) => {
        const baseTime = Math.ceil(size / 100) * 2;
        return `${baseTime}-${baseTime + 5} ’æ’°’µ÷Ä’Ø’µ’°’∂`;
    };

    // Show inactive state when not active and not completed
    if (!isActive && !isCompleted) {
        return (
            <PhaseCard
                title="’ì’∏÷Ä’±’°’£’´’ø’°’Ø’°’∂ ÷É’∏÷Ç’¨"
                icon="üß†"
                phase="expert"
                className="opacity-60 w-full max-w-none"
            >
                {/* Status Badge */}
                <div className="mb-3 sm:mb-4">
                    <div className="flex items-center space-x-2 text-gray-400 text-sm font-medium">
                        <span className="w-2 h-2 bg-gray-400 rounded-full opacity-50"></span>
                        <span>’ç’∫’°’Ω’∏÷Ç’¥</span>
                    </div>
                </div>

                <Alert type="info" icon="‚ÑπÔ∏è" title="’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’¥’∑’°’Ø’æ’∏÷Ç’¥ ’ß...">
                    <div className="text-sm sm:text-base">
                        ’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’® ’∫’•’ø÷Ñ ’ß ’°’æ’°÷Ä’ø’´ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¥’∑’°’Ø’∏÷Ç’¥’®
                    </div>
                    <div className="mt-2 text-xs sm:text-sm">
                        <strong>’ì’∏÷Ä’±’°’£’•’ø’´ ’¥’•’©’∏’§’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂</strong>
                        <ul className="list-disc list-inside mt-1 space-y-1">
                            <li>üîÆ ’à’π ’∞’Ω’ø’°’Ø ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’°’∂ ’Ø’´÷Ä’°’º’∏÷Ç’¥</li>
                            <li>üéØ ‘Ω’•’¨’°÷Å’´ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥</li>
                            <li>üìä ‘≥’Æ’°’∫’°’ø’Ø’•÷Ä’°’µ’´’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂</li>
                            <li>ü§ñ ‘ø’°’∂’≠’°’ø’•’Ω’¥’°’∂ ’¥’∏’§’•’¨’∂’•÷Ä</li>
                            <li>üìã ’à÷Ä’∏’∑’∏÷Ç’¥’∂’•÷Ä’´ ’Ω÷Å’•’∂’°÷Ä’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥</li>
                        </ul>
                    </div>
                </Alert>
            </PhaseCard>
        );
    }

    const summary = getExpertSummary();

    return (
        <PhaseCard
            title="’ì’∏÷Ä’±’°’£’´’ø’°’Ø’°’∂ ÷É’∏÷Ç’¨"
            icon="üß†"
            phase="expert"
            className={`w-full max-w-none transition-all duration-300 ${isCompleted
                ? 'bg-green-500/10 border-green-500/30'
                : isActive
                    ? 'bg-blue-500/10 border-blue-500/30 shadow-lg'
                    : 'opacity-60'
                }`}
        >
            {/* Status Badge */}
            <div className="mb-3 sm:mb-4">
                {isCompleted && (
                    <div className="flex items-center space-x-2 text-green-400 text-sm font-medium">
                        <span className="w-2 h-2 bg-green-400 rounded-full"></span>
                        <span>‘±’æ’°÷Ä’ø’æ’°’Æ</span>
                    </div>
                )}
                {isActive && !isCompleted && (
                    <div className="flex items-center space-x-2 text-green-400 text-sm font-medium">
                        <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                        <span>‘∏’∂’©’°÷Å÷Ñ’´ ’¥’•’ª</span>
                    </div>
                )}
            </div>

            <div className={`space-y-3 sm:space-y-4 ${!isActive && !isCompleted ? 'pointer-events-none' : ''}`}>
                {/* ’ç’ø’°÷Å’æ’°’Æ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’´’∂÷Ü’∏÷Ä’¥’°÷Å’´’° */}
                <Alert type="success" icon="‚úÖ" title="’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’°’Ø’°’∂ ÷É’∏÷Ç’¨’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’∫’°’ø÷Ä’°’Ω’ø ’•’∂">
                    <div className="text-sm sm:text-base">
                        ’ä’°’ø÷Ä’°’Ω’ø ’ß ÷É’∏÷Ä’±’°’£’´’ø’°’Ø’°’∂ ÷É’∏÷Ç’¨’´ ’≠’∏÷Ä’°÷Å’æ’°’Æ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä
                    </div>
                    <div className="mt-2 text-xs sm:text-sm space-y-1">
                        <div className="break-words">
                            <strong>’Ü’°’≠’°’£’´’Æ:</strong>
                            <span className="ml-1">{projectName}</span>
                        </div>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-1 sm:gap-2">
                            <div>
                                <strong>’è’æ’µ’°’¨’∂’•÷Ä’´ ’Æ’°’æ’°’¨:</strong> {summary.totalProcessed} ’ø’∏’≤
                            </div>
                            <div>
                                <strong>‘≤’°÷Ä’§’∏÷Ç’©’µ’∏÷Ç’∂:</strong> {summary.analysisComplexity}
                            </div>
                        </div>
                    </div>
                </Alert>

                {/* Processing Status */}
                {/* {isProcessing && currentStep && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4">
                        <div className="flex items-start sm:items-center space-x-3">
                            <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin flex-shrink-0 mt-0.5 sm:mt-0"></div>
                            <div className="min-w-0 flex-1">
                                <div className="font-medium text-blue-800 text-sm break-words">{currentStep}</div>
                                <div className="text-blue-600 text-xs">
                                    ’à÷Ä’∏’∑’∏÷Ç’¥ ’ß ’Ø’°’µ’°÷Å’æ’∏÷Ç’¥...
                                </div>
                            </div>
                        </div>
                    </div>
                )} */}

                {/* ’ì’∏÷Ä’±’°’£’•’ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’£’∏÷Ä’Æ’´÷Ñ’°’Ø’°’¶’¥ */}
                <div className="bg-purple-50 rounded-lg p-3 sm:p-4">
                    <h4 className="font-bold text-sm text-purple-800 mb-2 sm:mb-3">üß†  ’ì’∏÷Ä’±’°’£’´’ø’°’Ø’°’∂ ÷É’∏÷Ç’¨’´ ’£’∏÷Ä’Æ’´÷Ñ’°’Ø’°’¶’¥</h4>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3 text-xs">
                        <div className={`bg-white rounded p-2 sm:p-3 shadow-sm transition-all duration-300 ${isProcessing && currentStep.includes('’à’π ’∞’Ω’ø’°’Ø') ? 'ring-2 ring-blue-400 bg-blue-50' : ''
                            }`}>
                            <div className="font-bold text-purple-700 text-xs sm:text-sm">üîÆ Fuzzy Logic</div>
                            <div className="text-purple-600 text-xs break-words">‘±’∂’∏÷Ä’∏’∑’∏÷Ç’©’µ’°’∂ ’¥’∏’§’•’¨’°’æ’∏÷Ä’∏÷Ç’¥</div>
                        </div>
                        <div className={`bg-white rounded p-2 sm:p-3 shadow-sm transition-all duration-300 ${isProcessing && currentStep.includes('’Ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°') ? 'ring-2 ring-blue-400 bg-blue-50' : ''
                            }`}>
                            <div className="font-bold text-purple-700 text-xs sm:text-sm">ü§ñ ACAS (‘±’æ’ø’∏’¥’°’ø ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂)</div>
                            <div className="text-purple-600 text-xs break-words">’ï’∫’ø’´’¥’°’¨ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥</div>
                        </div>
                        <div className="bg-white rounded p-2 sm:p-3 shadow-sm">
                            <div className="font-bold text-purple-700 text-xs sm:text-sm">üìä Statistical Analysis</div>
                            <div className="text-purple-600 text-xs break-words">‘Ω’∏÷Ä’°÷Å’æ’°’Æ ’Ω’ø’°’ø’´’Ω’ø’´’Ø’°</div>
                        </div>
                        <div className={`bg-white rounded p-2 sm:p-3 shadow-sm transition-all duration-300 ${isProcessing && currentStep.includes('’ç÷Å’•’∂’°÷Ä’∂’•÷Ä’´') ? 'ring-2 ring-blue-400 bg-blue-50' : ''
                            }`}>
                            <div className="font-bold text-purple-700 text-xs sm:text-sm">ü§ñScenario Planning</div>
                            <div className="text-purple-600 text-xs break-words">’ì’∏÷Ä’±’°’£’•’ø’´ ’£’´’ø’•’¨’´÷Ñ’∂’•÷Ä</div>
                        </div>
                    </div>
                </div>

                {/* ’Ñ’∑’°’Ø’¥’°’∂ ’Ø’°’∂’≠’°’ø’•’Ω’∏÷Ç’¥ */}
                <div className="bg-indigo-50 rounded-lg p-3 sm:p-4">
                    <h4 className="font-bold text-sm text-indigo-800 mb-2">‚è±Ô∏è ’Ñ’∑’°’Ø’¥’°’∂ ’Ø’°’∂’≠’°’ø’•’Ω’∏÷Ç’¥</h4>
                    <div className="text-xs sm:text-sm text-indigo-700 space-y-1">
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-1 sm:gap-2">
                            <div>‚Ä¢ ‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä: {summary.originalDataset} ’ø’∏’≤</div>
                            <div>‚Ä¢ ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä: {summary.syntheticDataset} ’ø’∏’≤</div>
                        </div>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-1 sm:gap-2">
                            <div>‚Ä¢ ‘≥’∂’°’∞’°’ø’æ’°’Æ ’™’°’¥’°’∂’°’Ø: {summary.estimatedTime}</div>
                            <div>‚Ä¢ ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’¢’°÷Ä’§’∏÷Ç’©’µ’∏÷Ç’∂: {summary.analysisComplexity}</div>
                        </div>
                    </div>
                </div>

                {/* ’Ñ’•’©’∏’§’°’¢’°’∂’°’Ø’°’∂ ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ */}
                <details className="bg-gray-50 rounded-lg p-3 sm:p-4">
                    <summary className="font-bold text-sm text-gray-700 cursor-pointer hover:text-gray-900 select-none">
                        üìö ‘ø’´÷Ä’°’º’æ’∏’≤ ’¥’•’©’∏’§’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂
                    </summary>
                    <div className="mt-3 text-xs sm:text-sm text-gray-600 space-y-2">
                        <div>
                            <strong className="block sm:inline">1. ’à’π ’∞’Ω’ø’°’Ø ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (Fuzzy Logic):</strong>
                            <span className="block sm:inline sm:ml-1">’Ñ’∑’°’Ø’∏÷Ç’¥ ’ß ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’°’∂’∏÷Ä’∏’∑’∏÷Ç’©’µ’∏÷Ç’∂’® ÷á ’æ’Ω’ø’°’∞’∏÷Ç’©’µ’°’∂ ’¥’°’Ø’°÷Ä’§’°’Ø’∂’•÷Ä’®:</span>
                        </div>
                        <div>
                            <strong className="block sm:inline">2. ü§ñ ACAS (‘±’æ’ø’∏’¥’°’ø ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂):</strong>
                            <span className="block sm:inline sm:ml-1">‘≤’°÷Å’°’∞’°’µ’ø’∏÷Ç’¥ ’ß ’©’°÷Ñ’∂’æ’°’Æ ÷Ö÷Ä’´’∂’°’π’°÷É’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ÷á ’≠’¥’¢’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä’®:</span>
                        </div>
                    </div>
                </details>

                {/* ’ì’∏÷Ä’±’°’£’•’ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’¥’•’Ø’∂’°÷Ä’Ø */}
                <div className="pt-3 sm:pt-4 border-t border-gray-200">
                    <Button
                        onClick={startExpertAnalysis}
                        variant="expert"
                        size="md"
                        className={`w-full text-sm sm:text-base py-3 sm:py-4 transition-all duration-300 ${isCompleted
                            ? 'bg-green-500 text-white cursor-default'
                            : ''
                            }`}
                        disabled={
                            isCompleted ||
                            isProcessing ||
                            !currentData ||
                            currentData.length === 0
                        }
                    >
                        {isProcessing ? (
                            <div className="flex items-center justify-center">
                                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                                <span className="hidden sm:inline">
                                    ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’®’∂’©’°÷Å÷Ñ’´ ’¥’•’ª ’ß...
                                </span>
                                <span className="sm:hidden">‘∏’∂’©’°÷Å÷Ñ’´ ’¥’•’ª ’ß...</span>
                            </div>
                        ) : isCompleted ? (
                            <span className="text-center">‚úÖ ’ì’∏÷Ä’±’°’£’´’ø’°’Ø’°’∂ ÷É’∏÷Ç’¨’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’°’æ’°÷Ä’ø’æ’°’Æ ’ß</span>
                        ) : (
                            <span>üß† ’ç’Ø’Ω’•’¨ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂’®</span>
                        )}
                    </Button>

                    <div className="mt-3 text-xs sm:text-sm text-white">
                        üéØ <strong>’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ:</strong>
                        <ul className="list-disc list-inside mt-1 space-y-1 pl-2 sm:pl-0">
                            <li className="break-words">’è’æ’µ’°’¨’∂’•÷Ä’´ ’≠’¥’¢’°’æ’∏÷Ä’¥’°’∂ ÷Ö’∫’ø’´’¥’°’¨’°÷Å’∏÷Ç’¥</li>
                            <li className="break-words">’à÷Ä’∏’∑’∏÷Ç’¥’∂’•÷Ä ’®’∂’§’∏÷Ç’∂’¥’°’∂’∂ ’°’ª’°’Ø÷Å’∏’≤ ’Ω÷Å’•’∂’°÷Ä’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥</li>
                            <li className="break-words">’Ñ’•’∂’•’ª’•÷Ä’´ ’∞’°’¥’°÷Ä ÷Ö’∫’ø’´’¥’°’¨ ’£’∏÷Ä’Æ’∂’°’Ø’°’∂ ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</li>
                        </ul>
                    </div>
                </div>
            </div>
        </PhaseCard>
    );
}

export default ExpertPhase;