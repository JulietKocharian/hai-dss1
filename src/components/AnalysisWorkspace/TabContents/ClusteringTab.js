import React, { useState, useMemo } from 'react';
import { useData } from '../../../context/DataContext';
import { ChartCard, ClusterCard } from '../../UI/Card';
import Button, { ButtonGroup } from '../../UI/Button';
import Alert from '../../UI/Alert';
import { performClustering } from '../../../utils/clustering';
import ClusterCharts from '../../Charts/ClusterCharts';
import ClusterScatterChart from '../../Charts/ClusteringScatter';

import Map from '../../Map/Map';

const ClusteringTab = () => {
    const {
        currentData,
        clusterData,
        setClusterData,
        syntheticData, // Added syntheticData from context
        dataType
    } = useData();

    const [showVisualization, setShowVisualization] = useState(false);

    const [clusteringSettings, setClusteringSettings] = useState({
        clusterCount: 4,
        method: 'acas',
        maxIterations: 100
    });

    const [isProcessing, setIsProcessing] = useState(false);

    // Enhanced cluster data with synthetic data integrated
    const enhancedClusterData = useMemo(() => {
        if (!clusterData || clusterData.length === 0) {
            return clusterData;
        }

        if (!syntheticData || syntheticData.length === 0) {
            return clusterData;
        }

        // Distribute synthetic data across clusters
        const syntheticPerCluster = Math.floor(syntheticData.length / clusterData.length);
        const remainingSynthetic = syntheticData.length % clusterData.length;

        return clusterData.map((cluster, index) => {
            // Calculate how many synthetic points this cluster gets
            const syntheticCount = syntheticPerCluster + (index < remainingSynthetic ? 1 : 0);
            const startIndex = index * syntheticPerCluster + Math.min(index, remainingSynthetic);
            const clusterSyntheticData = syntheticData.slice(startIndex, startIndex + syntheticCount);

            return {
                ...cluster,
                // Add synthetic data points to this cluster
                syntheticPoints: clusterSyntheticData,
                // Update size to include synthetic data
                originalSize: cluster.size,
                size: cluster.size + syntheticCount,
                // Enhanced properties
                hasSyntheticData: syntheticCount > 0,
                syntheticCount: syntheticCount,
                // Recalculate quality with more data points
                quality: Math.min(100, cluster.quality + (syntheticCount > 0 ? 5 : 0))
            };
        });
    }, [clusterData, syntheticData]);

    /**
     * ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’¥’•’Ø’∂’°÷Ä’Ø
     */
    const startClustering = async () => {
        if (!currentData || currentData.length === 0) {
            alert('’è’æ’µ’°’¨’∂’•÷Ä’® ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’•’∂ ’Ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’∞’°’¥’°÷Ä');
            return;
        }

        setIsProcessing(true);

        try {
            // ’ç’´’¥’∏÷Ç’¨’µ’°÷Å’´’°’µ’´ ’∞’•’ø’°’±’£’∏÷Ç’¥
            await new Promise(resolve => setTimeout(resolve, 2000));

            const clusters = await performClustering(currentData, dataType, clusteringSettings);
            setClusterData(clusters);

            console.log('‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ:', clusters);

        } catch (error) {
            console.error('‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’Ω’≠’°’¨:', error);
            alert('‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’™’°’¥’°’∂’°’Ø ’Ω’≠’°’¨ ’°’º’°’ª’°÷Å’°’æ');
        } finally {
            setIsProcessing(false);
        }
    };

    /**
     * ‘ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä’´ ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥
     */
    const updateSettings = (key, value) => {
        setClusteringSettings(prev => ({
            ...prev,
            [key]: value
        }));
    };

    if (!currentData || currentData.length === 0) {
        return (
            <Alert type="warning" title="’è’æ’µ’°’¨’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨">
                ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’∞’°’¥’°÷Ä ’°’∂’∞÷Ä’°’™’•’∑’ø ’ß ’∂’°’≠ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®:
            </Alert>
        );
    }

    console.log(clusterData, 'clusterDataclusterData')
    return (
        <div className="space-y-6">
            {/* ’é’•÷Ä’∂’°’£’´÷Ä */}
            <div>
                <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    üéØ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’¥’•’©’∏’§
                </h3>
            </div>

            {/* ’Ñ’•’©’∏’§’°’¢’°’∂’°’Ø’°’∂ ’´’∂÷Ü’∏ */}
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <h4 className="font-bold text-red-800 mb-2">üßÆ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’¥’°’Ω’´’∂</h4>
                <div className="text-sm text-red-700 space-y-2">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-3">
                        <div className="bg-white rounded p-3 border">
                            <div className="font-bold text-blue-600">ACAS</div>
                            <div className="text-xs text-gray-600 mt-1">‘±’æ’ø’∏’¥’°’ø ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷á ÷Ö’∫’ø’´’¥’°’¨ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥</div>
                        </div>
                        <div className="bg-white rounded p-3 border">
                            <div className="font-bold text-green-600">Hierarchical</div>
                            <div className="text-xs text-gray-600 mt-1">’ç’ø’•’≤’Æ’∏÷Ç’¥ ’ß ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ’Æ’°’º</div>
                        </div>
                        <div className="bg-white rounded p-3 border">
                            <div className="font-bold text-purple-600">DBSCAN</div>
                            <div className="text-xs text-gray-600 mt-1">’Ä’°’∑’æ’´ ’ß ’°’º’∂’∏÷Ç’¥ ’°’≤’¥’∏÷Ç’Ø’® ÷á ’∏’π ’Ω’ø’°’∂’§’°÷Ä’ø ’Ø’•’ø’•÷Ä’®</div>
                        </div>
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä */}
                <ChartCard
                    title="‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä"
                >
                    <div className="space-y-4">
                        {/* ‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø */}
                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-2">
                                ‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø
                            </label>
                            <input
                                type="range"
                                min="2"
                                max="8"
                                value={clusteringSettings.clusterCount}
                                onChange={(e) => updateSettings('clusterCount', parseInt(e.target.value))}
                                className="w-full"
                            />
                            <div className="flex justify-between text-xs text-gray-500 mt-1">
                                <span>2</span>
                                <span className="font-bold text-red-600">{clusteringSettings.clusterCount}</span>
                                <span>8</span>
                            </div>
                        </div>

                        {/* ‘±’¨’£’∏÷Ä’´’©’¥’´ ’¥’•’©’∏’§ */}
                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-2">
                                ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’¥’•’©’∏’§
                            </label>
                            <select
                                value={clusteringSettings.method}
                                onChange={(e) => updateSettings('method', e.target.value)}
                                className="w-full p-2 border border-gray-300 rounded-lg"
                            >
                                <option value="acas">ü§ñ ACAS (‘±’æ’ø’∏’¥’°’ø ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂)</option>
                                <option value="kmeans">üéØ K-’Ñ’´’ª’´’∂’∂’•÷Ä (K-Means)</option>
                                <option value="fuzzy_cmeans">üå∏ Fuzzy C-’Ñ’´’ª’´’∂’∂’•÷Ä</option>
                                <option value="hierarchical">üå≥ ’Ä’´’•÷Ä’°÷Ä’≠’´’Ø ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥</option>
                                <option value="dbscan">üîç DBSCAN</option>
                                <option value="spectral">üåà ’ç’∫’•’Ø’ø÷Ä’°’¨ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥</option>
                            </select>
                        </div>

                        {/* ‘±’º’°’æ’•’¨’°’£’∏÷Ç’µ’∂ ’Ø÷Ä’Ø’∂’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä */}
                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-2">
                                ‘±’º’°’æ’•’¨’°’£’∏÷Ç’µ’∂ ’Ø÷Ä’Ø’∂’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä
                            </label>
                            <input
                                type="number"
                                min="50"
                                max="500"
                                step="50"
                                value={clusteringSettings.maxIterations}
                                onChange={(e) => updateSettings('maxIterations', parseInt(e.target.value))}
                                className="w-full p-2 border border-gray-300 rounded-lg"
                            />
                        </div>

                        {/* ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’Ø’∏’≥’°’Ø */}
                        <div className="pt-4 border-t border-gray-200">
                            <Button
                                onClick={startClustering}
                                variant="warning"
                                size="md"
                                className="w-full"
                                disabled={isProcessing}
                                loading={isProcessing}
                            >
                                {isProcessing ? 'üîÑ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥...' : 'üéØ ’ç’Ø’Ω’•’¨ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥’®'}
                            </Button>
                        </div>
                    </div>
                </ChartCard>

                {/* ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’∏÷Ç’¥ */}
                <ChartCard
                    title="’è’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’∏÷Ç’¥"
                >
                    <div className="space-y-4">
                        {/* ’è’æ’µ’°’¨’∂’•÷Ä’´ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ */}
                        <div className="bg-gray-50 rounded-lg p-4">
                            <h5 className="font-bold text-gray-700 mb-3">üìä ’è’æ’µ’°’¨’∂’•÷Ä’´ ’°’¥÷É’∏÷É’∏÷Ç’¥</h5>
                            <div className="grid grid-cols-2 gap-4 text-sm">
                                <div>
                                    <span className="text-gray-600">‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’∏’≤’•÷Ä:</span>
                                    <span className="font-bold ml-2">{currentData.length}</span>
                                </div>
                                {syntheticData && syntheticData.length > 0 && (
                                    <div>
                                        <span className="text-gray-600">’ç’´’∂’©’•’ø’´’Ø ’ø’∏’≤’•÷Ä:</span>
                                        <span className="font-bold ml-2 text-green-600">+{syntheticData.length}</span>
                                    </div>
                                )}
                                <div>
                                    <span className="text-gray-600">’ç’µ’∏÷Ç’∂’°’Ø’∂’•÷Ä:</span>
                                    <span className="font-bold ml-2">{Object.keys(currentData[0]).length}</span>
                                </div>
                                <div>
                                    <span className="text-gray-600">‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä:</span>
                                    <span className="font-bold ml-2 text-blue-600">
                                        {currentData.length + (syntheticData?.length || 0)}
                                    </span>
                                </div>
                            </div>
                        </div>

                        {/* ’Ñ’•’©’∏’§’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂ */}
                        <div className="bg-blue-50 rounded-lg p-4">
                            <h5 className="font-bold text-blue-700 mb-2">ü§ñ ‘±’º’°’ª’°÷Ä’Ø’æ’∏’≤ ’¥’•’©’∏’§</h5>
                            <div className="text-sm text-blue-600">
                                {getRecommendedMethod()}
                            </div>
                        </div>

                        {/* ‘ø’°’∂’≠’°’ø’•’Ω’æ’°’Æ ’™’°’¥’°’∂’°’Ø */}
                        <div className="bg-yellow-50 rounded-lg p-4">
                            <h5 className="font-bold text-yellow-700 mb-2">‚è±Ô∏è ‘≥’∂’°’∞’°’ø’æ’°’Æ ’™’°’¥’°’∂’°’Ø</h5>
                            <div className="text-sm text-yellow-600">
                                <div>’Ñ’∑’°’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {getEstimatedTime()}</div>
                                <div>‘≤’°÷Ä’§’∏÷Ç’©’µ’∏÷Ç’∂: {getComplexity()}</div>
                            </div>
                        </div>

                        {/* ’Ü’°’≠’°’∫’°’µ’¥’°’∂’∂’•÷Ä */}
                        <div className="text-xs text-gray-500">
                            <strong>üí° ’Ä’∏÷Ç’∑’∏÷Ç’¥’∂’•÷Ä:</strong>
                            <ul className="list-disc list-inside mt-1 space-y-1">
                                <li>‘±’æ’•’¨’´ ÷Ñ’´’π ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä = ’°’æ’•’¨’´ ’∑’°’ø ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’≠’¥’¢’•÷Ä</li>
                                <li>ACAS ’°’¨’£’∏÷Ä’´’©’¥’® ’°’æ’ø’∏’¥’°’ø ’Ø’®’∂’ø÷Ä’´ ’¨’°’æ’°’£’∏÷Ç’µ’∂ ’¥’•’©’∏’§’®</li>
                                <li>‘±’¨’£’∏÷Ä’´’©’¥’® ’Ø’∞’°’µ’ø’∂’°’¢’•÷Ä’´ ’°’≤’¥’∏÷Ç’Ø’® ÷á ’°’∂’Ø’°’∂’∏’∂ ’Ø’•’ø’•÷Ä’®</li>
                                {syntheticData && syntheticData.length > 0 && (
                                    <li className="text-green-600">’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’® ’°’æ’ø’∏’¥’°’ø ’°’æ’•’¨’°÷Å’æ’•’¨ ’•’∂ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´’∂</li>
                                )}
                            </ul>
                        </div>
                    </div>
                </ChartCard>
            </div>

            {/* ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä */}
            {enhancedClusterData && enhancedClusterData.length > 0 && (
                <>
                    <ChartCard title="‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                            {enhancedClusterData.map((cluster, index) => (
                                <ClusterCard
                                    key={index}
                                    id={cluster.id}
                                    label={cluster.label}
                                    size={cluster.size}
                                    avgValue={cluster.avgValue}
                                    quality={cluster.quality}
                                    syntheticCount={cluster.syntheticCount}
                                    originalSize={cluster.originalSize}
                                />
                            ))}
                        </div>
                    </ChartCard>

                    {/* ‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ */}
                    <ChartCard title="‘Ω’¥’¢’°’æ’∏÷Ä’¥’°’∂ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂">
                        <ClusterStatistics
                            clusters={enhancedClusterData}
                            totalData={currentData.length}
                            syntheticData={syntheticData}
                        />
                    </ChartCard>

                    {/* ‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ø’∏’≥’°’Ø’∂’•÷Ä */}
                    <div className="text-center">
                        <ButtonGroup>
                            <Button
                                onClick={() => exportClusterData()}
                                variant="success"
                                size="md"
                            >
                                üìä ’Ü’•÷Ä’¢’•’º’∂’•’¨ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’®
                            </Button>

                            <Button
                                onClick={() => visualizeClusters()}
                                variant="secondary"
                                size="md"
                            >
                                üìà ’é’´’¶’∏÷Ç’°’¨’°÷Å’∏÷Ç’¥
                            </Button>

                            <Button
                                onClick={() => startClustering()}
                                variant="warning"
                                size="md"
                            >
                                üîÑ ’é’•÷Ä’°’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥
                            </Button>
                        </ButtonGroup>
                    </div>
                </>
            )}

            {/* ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥ */}
            {enhancedClusterData && enhancedClusterData.length > 0 && (
                <Alert type="success" title="üéØ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’°’æ’°÷Ä’ø’æ’•’¨ ’ß">
                    <div className="space-y-2 text-sm">
                        <p>
                            ’Ä’°’µ’ø’∂’°’¢’•÷Ä’æ’•’¨ ’ß <strong>{enhancedClusterData.length} ’ø’°÷Ä’¢’•÷Ä ’≠’∏÷Ç’¥’¢</strong> ’®’∂’§’∞’°’∂’∏÷Ç÷Ä
                            <strong> {currentData.length}</strong> ’¢’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’´
                            {syntheticData && syntheticData.length > 0 && (
                                <span> ÷á <strong className="text-green-600">{syntheticData.length}</strong> ’Ω’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’´</span>
                            )} ’¥’•’ª
                        </p>
                        <div>
                            <strong>’Ä’´’¥’∂’°’Ø’°’∂ ’¢’°÷Å’°’∞’°’µ’ø’∏÷Ç’¥’∂’•÷Ä</strong>
                            <ul className="list-disc list-inside mt-1 space-y-1">
                                <li>‘±’¥’•’∂’°’¥’•’Æ ’≠’∏÷Ç’¥’¢’® ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’¥ ’ß {Math.max(...enhancedClusterData.map(c => c.size))} ’ø’°÷Ä÷Ä</li>
                                <li>‘±’¥’•’∂’°’¥’´’ª’´’∂ ’∏÷Ä’°’Ø’´ ’≠’∏÷Ç’¥’¢’® ’∏÷Ç’∂’´ {Math.max(...enhancedClusterData.map(c => c.quality))}% ’∏÷Ä’°’Ø</li>
                                <li>’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’∑’≠’∏÷Ç’¥’® {enhancedClusterData.length > 4 ? '’¢’°’¶’¥’°’≠’¥’¢’°’µ’´’∂' : '’∞’°’æ’°’Ω’°÷Ä’°’Ø’∑’º’æ’°’Æ'} ’ß</li>
                                {syntheticData && syntheticData.length > 0 && (
                                    <li className="text-green-600">’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’® ’´’∂’ø’•’£÷Ä’æ’°’Æ ’•’∂ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ’¥’•’ª</li>
                                )}
                            </ul>
                        </div>
                    </div>
                </Alert>
            )}

            {/* Enhanced Visualizations with Integrated Synthetic Data */}
            {showVisualization && enhancedClusterData.length > 0 && (
                <>
                    <Map />
                    <ClusterCharts
                        clusters={enhancedClusterData}
                    />
                    <ClusterScatterChart
                        clusters={enhancedClusterData}
                    />
                </>
            )}
        </div>
    );

    /**
     * ’è’æ’µ’°’¨’∂’•÷Ä’´ ’π’°÷É’•÷Ä (dimensions)
     */
    function getDimensionality() {
        return Object.keys(currentData[0]).length;
    }

    /**
     * ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’∞’°÷Ä’¥’°÷Ä’∏÷Ç’©’µ’°’∂ ’£’∂’°’∞’°’ø’°’Ø
     */
    function getClusterabilityScore() {
        const size = currentData.length + (syntheticData?.length || 0);
        const dimensions = getDimensionality();

        if (size < 20) return 60;
        if (size < 100) return 75;
        if (dimensions > 10) return 85;
        return 90;
    }

    /**
     * ‘±’º’°’ª’°÷Ä’Ø’æ’∏’≤ ’¥’•’©’∏’§’´ ’Ω’ø’°÷Å’∏÷Ç’¥
     */
    function getRecommendedMethod() {
        const size = currentData.length + (syntheticData?.length || 0);
        const dimensions = getDimensionality();

        if (size < 50) {
            return 'ü§ñ ACAS (’°’æ’ø’∏’¥’°’ø ’¥’•’©’∏’§’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷É’∏÷Ñ÷Ä ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’¥’°÷Ä)';
        } else if (dimensions > 5) {
            return 'ü§ñ ACAS (’¢’°’¶’¥’°’π’°÷É ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’°’æ’ø’∏’¥’°’ø ÷Ö’∫’ø’´’¥’´’¶’°÷Å’´’°)';
        } else {
            return 'ü§ñ ACAS (’°’æ’ø’∏’¥’°’ø ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’°’¨’£’∏÷Ä’´’©’¥’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂)';
        }
    }

    /**
     * ‘≥’∂’°’∞’°’ø’æ’°’Æ ’™’°’¥’°’∂’°’Ø’´ ’Ω’ø’°÷Å’∏÷Ç’¥
     */
    function getEstimatedTime() {
        const size = currentData.length + (syntheticData?.length || 0);
        if (size < 100) return '1-2 ’æ’°’µ÷Ä’Ø’µ’°’∂';
        if (size < 500) return '3-5 ’æ’°’µ÷Ä’Ø’µ’°’∂';
        return '5-10 ’æ’°’µ÷Ä’Ø’µ’°’∂';
    }

    /**
     * ‘≤’°÷Ä’§’∏÷Ç’©’µ’°’∂ ’Ω’ø’°÷Å’∏÷Ç’¥
     */
    function getComplexity() {
        const size = currentData.length + (syntheticData?.length || 0);
        const clusters = clusteringSettings.clusterCount;

        if (size < 100 && clusters < 5) return '’ë’°’Æ÷Ä';
        if (size < 500 && clusters < 7) return '’Ñ’´’ª’´’∂';
        return '‘≤’°÷Ä’±÷Ä';
    }

    /**
     * ‘ø’¨’°’Ω’ø’•÷Ä’°’µ’´’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’°÷Ä’ø’°’∞’°’∂’∏÷Ç’¥
     */
    function exportClusterData() {
        console.log('‘±÷Ä’ø’°’∞’°’∂’∏÷Ç’¥ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’®...', enhancedClusterData);
        alert('‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’® ’°÷Ä’ø’°’∞’°’∂’æ’•’¨ ’•’∂ CSV ÷Ü’°’µ’¨’´ ’¥’•’ª');
    }

    /**
     * ‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ’æ’´’¶’∏÷Ç’°’¨’´’¶’°÷Å’´’°
     */
    function visualizeClusters() {
        console.log('’é’´’¶’∏÷Ç’°’¨’´’¶’°÷Å’¥’°’∂ ’¥’•’Ø’∂’°÷Ä’Ø...', enhancedClusterData);
        setShowVisualization(true);
    }
};

/**
 * ‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’°’∂ ’¢’°’≤’°’§÷Ä’´’π - Updated to include synthetic data
 */
const ClusterStatistics = ({ clusters, totalData, syntheticData }) => {
    const totalClustered = clusters.reduce((sum, cluster) => sum + cluster.size, 0);
    const avgClusterSize = totalClustered / clusters.length;
    const syntheticCount = syntheticData?.length || 0;
    const effectiveTotal = totalData + syntheticCount;
    const coverage = (totalClustered / effectiveTotal) * 100;

    return (
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{clusters.length}</div>
                <div className="text-sm text-blue-700">‘Ω’¥’¢’•÷Ä’´ ÷Ñ’°’∂’°’Ø</div>
            </div>

            <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{Math.round(avgClusterSize)}</div>
                <div className="text-sm text-green-700">’Ñ’´’ª’´’∂ ’π’°÷É</div>
            </div>

            <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">{coverage.toFixed(1)}%</div>
                <div className="text-sm text-purple-700">‘∏’∂’§’£÷Ä’Ø’∏÷Ç’¥</div>
            </div>

            <div className="text-center p-4 bg-orange-50 rounded-lg">
                <div className="text-2xl font-bold text-orange-600">
                    {Math.round(clusters.reduce((sum, c) => sum + c.quality, 0) / clusters.length)}%
                </div>
                <div className="text-sm text-orange-700">’Ñ’´’ª’´’∂ ’∏÷Ä’°’Ø</div>
            </div>

            {syntheticData && syntheticData.length > 0 && (
                <div className="text-center p-4 bg-indigo-50 rounded-lg">
                    <div className="text-2xl font-bold text-indigo-600">
                        {syntheticCount}
                    </div>
                    <div className="text-sm text-indigo-700">’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨</div>
                </div>
            )}
        </div>
    );
};

export default ClusteringTab;