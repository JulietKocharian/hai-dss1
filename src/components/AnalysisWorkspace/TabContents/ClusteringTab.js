import React, { useState, useMemo } from 'react';
import { useData } from '../../../context/DataContext';
import { ChartCard, ClusterCard } from '../../UI/Card';
import Button, { ButtonGroup } from '../../UI/Button';
import Alert from '../../UI/Alert';
import { performClustering } from '../../../utils/clustering';
import ClusterCharts from '../../Charts/ClusterCharts';
import ClusterScatterChart from '../../Charts/ClusteringScatter';
import Papa from 'papaparse';

import Map from '../../Map/Map';

const ClusteringTab = () => {
    const {
        currentData,
        clusterData,
        setClusterData,
        syntheticData,
        dataType,
        rawData,
        clusteringSettings,
        setClusteringSettings
    } = useData();

    const [showVisualization, setShowVisualization] = useState(false);
    const [isProcessing, setIsProcessing] = useState(false);

    // –ü–∞—Ä—Å–∏–Ω–≥ CSV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Map –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É)
    const parsedData = useMemo(() => {
        if (!rawData) return null;

        try {
            const result = Papa.parse(rawData, {
                header: true,
                skipEmptyLines: true,
                dynamicTyping: true
            });
            return result.data;
        } catch (error) {
            console.error('’ç’≠’°’¨ CSV-’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’™’°’¥’°’∂’°’Ø:', error);
            return null;
        }
    }, [rawData]);

    // –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ Map –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
    const normalizeFeatures = (features) => {
        const numFeatures = features[0].length;
        const mins = new Array(numFeatures).fill(Infinity);
        const maxs = new Array(numFeatures).fill(-Infinity);

        features.forEach(feature => {
            feature.forEach((value, i) => {
                mins[i] = Math.min(mins[i], value);
                maxs[i] = Math.max(maxs[i], value);
            });
        });

        return features.map(feature =>
            feature.map((value, i) => {
                const range = maxs[i] - mins[i];
                return range === 0 ? 0 : (value - mins[i]) / range;
            })
        );
    };

    const euclideanDistance = (a, b) => {
        return Math.sqrt(a.reduce((sum, val, i) => sum + Math.pow(val - b[i], 2), 0));
    };

    const kMeans = (data, k, maxIterations = 100) => {
        const n = data.length;
        const d = data[0].length;

        let centroids = [];
        for (let i = 0; i < k; i++) {
            centroids.push(data[Math.floor(Math.random() * n)].slice());
        }

        let clusters = new Array(n);
        let changed = true;
        let iterations = 0;

        while (changed && iterations < maxIterations) {
            changed = false;
            iterations++;

            for (let i = 0; i < n; i++) {
                let minDist = Infinity;
                let closestCentroid = 0;

                for (let j = 0; j < k; j++) {
                    const dist = euclideanDistance(data[i], centroids[j]);
                    if (dist < minDist) {
                        minDist = dist;
                        closestCentroid = j;
                    }
                }

                if (clusters[i] !== closestCentroid) {
                    clusters[i] = closestCentroid;
                    changed = true;
                }
            }

            for (let j = 0; j < k; j++) {
                const clusterPoints = data.filter((_, i) => clusters[i] === j);
                if (clusterPoints.length > 0) {
                    for (let dim = 0; dim < d; dim++) {
                        centroids[j][dim] = clusterPoints.reduce((sum, point) => sum + point[dim], 0) / clusterPoints.length;
                    }
                }
            }
        }

        return clusters;
    };

    const performMapClustering = (data, k = 4) => {
        if (!data || data.length === 0) return [];

        const features = data.map(row => {
            const values = [];
            Object.keys(row).forEach(key => {
                if (key !== '–†–µ–≥–∏–æ–Ω' && typeof row[key] === 'number') {
                    values.push(row[key]);
                }
            });
            return values;
        });

        if (features.length === 0 || features[0].length === 0) return [];

        const normalizedFeatures = normalizeFeatures(features);
        const clusters = kMeans(normalizedFeatures, k);

        return data.map((row, index) => ({
            region: row['–†–µ–≥–∏–æ–Ω'],
            cluster: clusters[index] + 1,
            data: row
        }));
    };

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
    const regionClusters = useMemo(() => {
        if (!parsedData || parsedData.length === 0) return [];

        const clustered = performMapClustering(parsedData, clusteringSettings.clusterCount);

        const regionNameMapping = {
            '–ê—Ä–∞–≥–∞—Ü–æ—Ç–Ω': '‘±÷Ä’°’£’°’Æ’∏’ø’∂',
            '–ê—Ä–∞—Ä–∞—Ç': '‘±÷Ä’°÷Ä’°’ø',
            '–ê—Ä–º–∞–≤–∏—Ä': '‘±÷Ä’¥’°’æ’´÷Ä',
            '–ì–µ–≥–∞—Ä–∫—É–Ω–∏–∫': '‘≥’•’≤’°÷Ä÷Ñ’∏÷Ç’∂’´÷Ñ',
            '–õ–æ—Ä–∏': '‘º’∏’º’´',
            '–ö–æ—Ç–∞–π–∫': '‘ø’∏’ø’°’µ÷Ñ',
            '–®–∏—Ä–∞–∫': '’á’´÷Ä’°’Ø',
            '–°—é–Ω–∏–∫': '’ç’µ’∏÷Ç’∂’´÷Ñ',
            '–í–∞–π–æ—Ü –î–∑–æ—Ä': '’é’°’µ’∏÷Å ’±’∏÷Ä',
            '–¢–∞–≤—É—à': '’è’°’æ’∏÷Ç’∑',
            '–ï—Ä–µ–≤–∞–Ω': '‘µ÷Ä÷á’°’∂'
        };

        return clustered.map(item => ({
            Claster: item.cluster,
            –†–µ–≥–∏–æ–Ω: regionNameMapping[item.region] || item.region
        }));
    }, [parsedData, clusteringSettings.clusterCount]);

    // Enhanced cluster data with synthetic data integrated
    const enhancedClusterData = useMemo(() => {
        if (!clusterData || clusterData.length === 0) {
            return clusterData;
        }

        if (!syntheticData || syntheticData.length === 0) {
            return clusterData;
        }

        const syntheticPerCluster = Math.floor(syntheticData.length / clusterData.length);
        const remainingSynthetic = syntheticData.length % clusterData.length;

        return clusterData?.map((cluster, index) => {
            const syntheticCount = syntheticPerCluster + (index < remainingSynthetic ? 1 : 0);
            const startIndex = index * syntheticPerCluster + Math.min(index, remainingSynthetic);
            const clusterSyntheticData = syntheticData.slice(startIndex, startIndex + syntheticCount);

            return {
                ...cluster,
                syntheticPoints: clusterSyntheticData,
                originalSize: cluster.size,
                size: cluster.size + syntheticCount,
                hasSyntheticData: syntheticCount > 0,
                syntheticCount: syntheticCount,
                quality: Math.min(100, cluster.quality + (syntheticCount > 0 ? 5 : 0))
            };
        });
    }, [clusterData, syntheticData]);

    /**
     * ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’¥’•’Ø’∂’°÷Ä’Ø
     */
    const startClustering = async () => {
        if (!currentData || currentData.length === 0) {
            alert('’è’æ’µ’°’¨’∂’•÷Ä’® ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’•’∂ ’Ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’∞’°’¥’°÷Ä');
            return;
        }

        setIsProcessing(true);

        try {
            await new Promise(resolve => setTimeout(resolve, 2000));
            const clusters = await performClustering(currentData, dataType, clusteringSettings);
            setClusterData(clusters);
            console.log('‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ:', clusters);
        } catch (error) {
            console.error('‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’Ω’≠’°’¨:', error);
            alert('‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’™’°’¥’°’∂’°’Ø ’Ω’≠’°’¨ ’°’º’°’ª’°÷Å’°’æ');
        } finally {
            setIsProcessing(false);
        }
    };

    /**
     * ‘ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä’´ ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥
     */
    const updateSettings = (key, value) => {
        setClusteringSettings(prev => ({
            ...prev,
            [key]: value
        }));
    };

    if (!currentData || currentData.length === 0) {
        return (
            <Alert type="warning" title="’è’æ’µ’°’¨’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨">
                ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’∞’°’¥’°÷Ä ’°’∂’∞÷Ä’°’™’•’∑’ø ’ß ’∂’°’≠ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®:
            </Alert>
        );
    }

    return (
        <div className="space-y-6">
            {/* ’é’•÷Ä’∂’°’£’´÷Ä */}
            <div>
                <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    üéØ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’¥’•’©’∏’§
                </h3>
            </div>

            {/* ’Ñ’•’©’∏’§’°’¢’°’∂’°’Ø’°’∂ ’´’∂÷Ü’∏ */}
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <h4 className="font-bold text-red-800 mb-2">üßÆ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’¥’°’Ω’´’∂</h4>
                <div className="text-sm text-red-700 space-y-2">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-3">
                        <div className="bg-white rounded p-3 border">
                            <div className="font-bold text-blue-600">ACAS</div>
                            <div className="text-xs text-gray-600 mt-1">‘±’æ’ø’∏’¥’°’ø ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷á ÷Ö’∫’ø’´’¥’°’¨ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥</div>
                        </div>
                        <div className="bg-white rounded p-3 border">
                            <div className="font-bold text-green-600">Hierarchical</div>
                            <div className="text-xs text-gray-600 mt-1">’ç’ø’•’≤’Æ’∏÷Ç’¥ ’ß ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ’Æ’°’º</div>
                        </div>
                        <div className="bg-white rounded p-3 border">
                            <div className="font-bold text-purple-600">DBSCAN</div>
                            <div className="text-xs text-gray-600 mt-1">’Ä’°’∑’æ’´ ’ß ’°’º’∂’∏÷Ç’¥ ’°’≤’¥’∏÷Ç’Ø’® ÷á ’∏’π ’Ω’ø’°’∂’§’°÷Ä’ø ’Ø’•’ø’•÷Ä’®</div>
                        </div>
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä */}
                <ChartCard title="‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä">
                    <div className="space-y-4">
                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-2">
                                ‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø
                            </label>
                            <input
                                type="range"
                                min="2"
                                max="8"
                                value={clusteringSettings.clusterCount}
                                onChange={(e) => updateSettings('clusterCount', parseInt(e.target.value))}
                                className="w-full"
                            />
                            <div className="flex justify-between text-xs text-gray-500 mt-1">
                                <span>2</span>
                                <span className="font-bold text-red-600">{clusteringSettings.clusterCount}</span>
                                <span>8</span>
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-2">
                                ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’¥’•’©’∏’§
                            </label>
                            <select
                                value={clusteringSettings.method}
                                onChange={(e) => updateSettings('method', e.target.value)}
                                className="w-full p-2 border border-gray-300 rounded-lg"
                            >
                                <option value="acas">ü§ñ ACAS (‘±’æ’ø’∏’¥’°’ø ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂)</option>
                                <option value="kmeans">üéØ K-’Ñ’´’ª’´’∂’∂’•÷Ä (K-Means)</option>
                                <option value="fuzzy_cmeans">üå∏ Fuzzy C-’Ñ’´’ª’´’∂’∂’•÷Ä</option>
                                <option value="hierarchical">üå≥ ’Ä’´’•÷Ä’°÷Ä’≠’´’Ø ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥</option>
                                <option value="dbscan">üîç DBSCAN</option>
                                <option value="spectral">üåà ’ç’∫’•’Ø’ø÷Ä’°’¨ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥</option>
                            </select>
                        </div>

                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-2">
                                ‘±’º’°’æ’•’¨’°’£’∏÷Ç’µ’∂ ’Ø÷Ä’Ø’∂’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä
                            </label>
                            <input
                                type="number"
                                min="50"
                                max="500"
                                step="50"
                                value={clusteringSettings.maxIterations}
                                onChange={(e) => updateSettings('maxIterations', parseInt(e.target.value))}
                                className="w-full p-2 border border-gray-300 rounded-lg"
                            />
                        </div>

                        <div className="pt-4 border-t border-gray-200">
                            <Button
                                onClick={startClustering}
                                variant="warning"
                                size="md"
                                className="w-full"
                                disabled={isProcessing}
                                loading={isProcessing}
                            >
                                {isProcessing ? 'üîÑ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥...' : 'üéØ ’ç’Ø’Ω’•’¨ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥’®'}
                            </Button>
                        </div>
                    </div>
                </ChartCard>

                {/* ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’∏÷Ç’¥ */}
                <ChartCard title="’è’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’∏÷Ç’¥">
                    <div className="space-y-4">
                        <div className="bg-gray-50 rounded-lg p-4">
                            <h5 className="font-bold text-gray-700 mb-3">üìä ’è’æ’µ’°’¨’∂’•÷Ä’´ ’°’¥÷É’∏÷É’∏÷Ç’¥</h5>
                            <div className="grid grid-cols-2 gap-4 text-sm">
                                <div>
                                    <span className="text-gray-600">‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’∏’≤’•÷Ä:</span>
                                    <span className="font-bold ml-2">{currentData.length}</span>
                                </div>
                                {syntheticData && syntheticData.length > 0 && (
                                    <div>
                                        <span className="text-gray-600">’ç’´’∂’©’•’ø’´’Ø ’ø’∏’≤’•÷Ä:</span>
                                        <span className="font-bold ml-2 text-green-600">+{syntheticData.length}</span>
                                    </div>
                                )}
                                <div>
                                    <span className="text-gray-600">’ç’µ’∏÷Ç’∂’°’Ø’∂’•÷Ä:</span>
                                    <span className="font-bold ml-2">{Object.keys(currentData[0]).length}</span>
                                </div>
                                <div>
                                    <span className="text-gray-600">‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä:</span>
                                    <span className="font-bold ml-2 text-blue-600">
                                        {currentData.length + (syntheticData?.length || 0)}
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div className="bg-blue-50 rounded-lg p-4">
                            <h5 className="font-bold text-blue-700 mb-2">ü§ñ ‘±’º’°’ª’°÷Ä’Ø’æ’∏’≤ ’¥’•’©’∏’§</h5>
                            <div className="text-sm text-blue-600">
                                {getRecommendedMethod()}
                            </div>
                        </div>

                        <div className="bg-yellow-50 rounded-lg p-4">
                            <h5 className="font-bold text-yellow-700 mb-2">‚è±Ô∏è ‘≥’∂’°’∞’°’ø’æ’°’Æ ’™’°’¥’°’∂’°’Ø</h5>
                            <div className="text-sm text-yellow-600">
                                <div>’Ñ’∑’°’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {getEstimatedTime()}</div>
                                <div>‘≤’°÷Ä’§’∏÷Ç’©’µ’∏÷Ç’∂: {getComplexity()}</div>
                            </div>
                        </div>

                        <div className="text-xs text-gray-500">
                            <strong>üí° ’Ä’∏÷Ç’∑’∏÷Ç’¥’∂’•÷Ä:</strong>
                            <ul className="list-disc list-inside mt-1 space-y-1">
                                <li>‘±’æ’•’¨’´ ÷Ñ’´’π ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä = ’°’æ’•’¨’´ ’∑’°’ø ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’≠’¥’¢’•÷Ä</li>
                                <li>ACAS ’°’¨’£’∏÷Ä’´’©’¥’® ’°’æ’ø’∏’¥’°’ø ’Ø’®’∂’ø÷Ä’´ ’¨’°’æ’°’£’∏÷Ç’µ’∂ ’¥’•’©’∏’§’®</li>
                                <li>‘±’¨’£’∏÷Ä’´’©’¥’® ’Ø’∞’°’µ’ø’∂’°’¢’•÷Ä’´ ’°’≤’¥’∏÷Ç’Ø’® ÷á ’°’∂’Ø’°’∂’∏’∂ ’Ø’•’ø’•÷Ä’®</li>
                                {syntheticData && syntheticData.length > 0 && (
                                    <li className="text-green-600">’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’® ’°’æ’ø’∏’¥’°’ø ’°’æ’•’¨’°÷Å’æ’•’¨ ’•’∂ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´’∂</li>
                                )}
                            </ul>
                        </div>
                    </div>
                </ChartCard>
            </div>

            {/* ‘ø’¨’°’Ω’ø’•÷Ä’´’¶’°÷Å’´’°’µ’´ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä */}
            {enhancedClusterData && enhancedClusterData.length > 0 && (
                <>
                    <ChartCard title="‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                            {enhancedClusterData.map((cluster, index) => (
                                <ClusterCard
                                    key={index}
                                    id={cluster.id}
                                    label={cluster.label}
                                    size={cluster.size}
                                    avgValue={cluster.avgValue}
                                    quality={cluster.quality}
                                    syntheticCount={cluster.syntheticCount}
                                    originalSize={cluster.originalSize}
                                />
                            ))}
                        </div>
                    </ChartCard>

                    <ChartCard title="‘Ω’¥’¢’°’æ’∏÷Ä’¥’°’∂ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂">
                        <ClusterStatistics
                            clusters={enhancedClusterData}
                            totalData={currentData.length}
                            syntheticData={syntheticData}
                        />
                    </ChartCard>

                    <div className="text-center">
                        <ButtonGroup>
                            <Button
                                onClick={() => exportClusterData()}
                                variant="success"
                                size="md"
                            >
                                üìä ’Ü’•÷Ä’¢’•’º’∂’•’¨ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’®
                            </Button>

                            <Button
                                onClick={() => visualizeClusters()}
                                variant="secondary"
                                size="md"
                            >
                                üìà ’é’´’¶’∏÷Ç’°’¨’°÷Å’∏÷Ç’¥
                            </Button>

                            <Button
                                onClick={() => startClustering()}
                                variant="warning"
                                size="md"
                            >
                                üîÑ ’é’•÷Ä’°’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥
                            </Button>
                        </ButtonGroup>
                    </div>
                </>
            )}

            {enhancedClusterData && enhancedClusterData.length > 0 && (
                <Alert type="success" title="üéØ ‘ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’°’æ’°÷Ä’ø’æ’•’¨ ’ß">
                    <div className="space-y-2 text-sm">
                        <p>
                            ’Ä’°’µ’ø’∂’°’¢’•÷Ä’æ’•’¨ ’ß <strong>{enhancedClusterData.length} ’ø’°÷Ä’¢’•÷Ä ’≠’∏÷Ç’¥’¢</strong> ’®’∂’§’∞’°’∂’∏÷Ç÷Ä
                            <strong> {currentData.length}</strong> ’¢’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’´
                            {syntheticData && syntheticData.length > 0 && (
                                <span> ÷á <strong className="text-green-600">{syntheticData.length}</strong> ’Ω’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’´</span>
                            )} ’¥’•’ª
                        </p>
                        <div>
                            <strong>’Ä’´’¥’∂’°’Ø’°’∂ ’¢’°÷Å’°’∞’°’µ’ø’∏÷Ç’¥’∂’•÷Ä</strong>
                            <ul className="list-disc list-inside mt-1 space-y-1">
                                <li>‘±’¥’•’∂’°’¥’•’Æ ’≠’∏÷Ç’¥’¢’® ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’¥ ’ß {Math.max(...enhancedClusterData.map(c => c.size))} ’ø’°÷Ä÷Ä</li>
                                <li>‘±’¥’•’∂’°’¥’´’ª’´’∂ ’∏÷Ä’°’Ø’´ ’≠’∏÷Ç’¥’¢’® ’∏÷Ç’∂’´ {Math.max(...enhancedClusterData.map(c => c.quality))}% ’∏÷Ä’°’Ø</li>
                                <li>’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’∑’≠’∏÷Ç’¥’® {enhancedClusterData.length > 4 ? '’¢’°’¶’¥’°’≠’¥’¢’°’µ’´’∂' : '’∞’°’æ’°’Ω’°÷Ä’°’Ø’∑’º’æ’°’Æ'} ’ß</li>
                                {syntheticData && syntheticData.length > 0 && (
                                    <li className="text-green-600">’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’® ’´’∂’ø’•’£÷Ä’æ’°’Æ ’•’∂ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ’¥’•’ª</li>
                                )}
                            </ul>
                        </div>
                    </div>
                </Alert>
            )}

            {/* Enhanced Visualizations with Map Integration */}
            {(showVisualization || regionClusters.length > 0) && enhancedClusterData && enhancedClusterData.length > 0 && (
                <>
                    {/* ’î’°÷Ä’ø’•’¶’´ ÷Å’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ */}
                    {regionClusters.length > 0 && (
                        <ChartCard title="üó∫Ô∏è ’Ñ’°÷Ä’¶’°’µ’´’∂ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ÷Ñ’°÷Ä’ø’•’¶">
                            <div className="mb-4 p-4 bg-blue-50 rounded-lg">
                                <p className="text-sm text-blue-700">
                                    <strong>’î’°÷Ä’ø’•’¶’´ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂:</strong> ’î’°÷Ä’ø’•’¶’® ÷Å’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’ß ’Ä’°’µ’°’Ω’ø’°’∂’´ ’¥’°÷Ä’¶’•÷Ä’´ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’®÷â
                                    ’Ö’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’£’∏÷Ç’µ’∂’® ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’∏÷Ç’¥ ’ß ’ø’°÷Ä’¢’•÷Ä ’Ø’¨’°’Ω’ø’•÷Ä÷â
                                    ‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø’ù <strong>{clusteringSettings.clusterCount}</strong>
                                </p>
                            </div>
                            <Map clusterCount={clusteringSettings.clusterCount} />
                        </ChartCard>
                    )}

                    <ClusterCharts clusters={enhancedClusterData} />
                    <ClusterScatterChart clusters={enhancedClusterData} />
                </>
            )}
        </div>
    );

    function getDimensionality() {
        return Object.keys(currentData[0]).length;
    }

    function getClusterabilityScore() {
        const size = currentData.length + (syntheticData?.length || 0);
        const dimensions = getDimensionality();

        if (size < 20) return 60;
        if (size < 100) return 75;
        if (dimensions > 10) return 85;
        return 90;
    }

    function getRecommendedMethod() {
        const size = currentData.length + (syntheticData?.length || 0);
        const dimensions = getDimensionality();

        if (size < 50) {
            return 'ü§ñ ACAS (’°’æ’ø’∏’¥’°’ø ’¥’•’©’∏’§’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷É’∏÷Ñ÷Ä ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’¥’°÷Ä)';
        } else if (dimensions > 5) {
            return 'ü§ñ ACAS (’¢’°’¶’¥’°’π’°÷É ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’°’æ’ø’∏’¥’°’ø ÷Ö’∫’ø’´’¥’´’¶’°÷Å’´’°)';
        } else {
            return 'ü§ñ ACAS (’°’æ’ø’∏’¥’°’ø ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’¥’°’∂ ’°’¨’£’∏÷Ä’´’©’¥’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂)';
        }
    }

    function getEstimatedTime() {
        const size = currentData.length + (syntheticData?.length || 0);
        if (size < 100) return '1-2 ’æ’°’µ÷Ä’Ø’µ’°’∂';
        if (size < 500) return '3-5 ’æ’°’µ÷Ä’Ø’µ’°’∂';
        return '5-10 ’æ’°’µ÷Ä’Ø’µ’°’∂';
    }

    function getComplexity() {
        const size = currentData.length + (syntheticData?.length || 0);
        const clusters = clusteringSettings.clusterCount;

        if (size < 100 && clusters < 5) return '’ë’°’Æ÷Ä';
        if (size < 500 && clusters < 7) return '’Ñ’´’ª’´’∂';
        return '‘≤’°÷Ä’±÷Ä';
    }

    function exportClusterData() {
        console.log('‘±÷Ä’ø’°’∞’°’∂’∏÷Ç’¥ ’Ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’®...', enhancedClusterData);
        alert('‘ø’¨’°’Ω’ø’•÷Ä’∂’•÷Ä’® ’°÷Ä’ø’°’∞’°’∂’æ’•’¨ ’•’∂ CSV ÷Ü’°’µ’¨’´ ’¥’•’ª');
    }

    function visualizeClusters() {
        console.log('’é’´’¶’∏÷Ç’°’¨’´’¶’°÷Å’¥’°’∂ ’¥’•’Ø’∂’°÷Ä’Ø...', enhancedClusterData);
        setShowVisualization(true);
    }
};

const ClusterStatistics = ({ clusters, totalData, syntheticData }) => {
    const totalClustered = clusters.reduce((sum, cluster) => sum + cluster.size, 0);
    const avgClusterSize = totalClustered / clusters.length;
    const syntheticCount = syntheticData?.length || 0;
    const effectiveTotal = totalData + syntheticCount;
    const coverage = (totalClustered / effectiveTotal) * 100;

    return (
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{clusters.length}</div>
                <div className="text-sm text-blue-700">‘Ω’¥’¢’•÷Ä’´ ÷Ñ’°’∂’°’Ø</div>
            </div>

            <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{Math.round(avgClusterSize)}</div>
                <div className="text-sm text-green-700">’Ñ’´’ª’´’∂ ’π’°÷É</div>
            </div>

            <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">{coverage.toFixed(1)}%</div>
                <div className="text-sm text-purple-700">‘∏’∂’§’£÷Ä’Ø’∏÷Ç’¥</div>
            </div>

            <div className="text-center p-4 bg-orange-50 rounded-lg">
                <div className="text-2xl font-bold text-orange-600">
                    {Math.round(clusters.reduce((sum, c) => sum + c.quality, 0) / clusters.length)}%
                </div>
                <div className="text-sm text-orange-700">’Ñ’´’ª’´’∂ ’∏÷Ä’°’Ø</div>
            </div>

            {syntheticData && syntheticData.length > 0 && (
                <div className="text-center p-4 bg-indigo-50 rounded-lg">
                    <div className="text-2xl font-bold text-indigo-600">
                        {syntheticCount}
                    </div>
                    <div className="text-sm text-indigo-700">’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨</div>
                </div>
            )}
        </div>
    );
};

export default ClusteringTab;